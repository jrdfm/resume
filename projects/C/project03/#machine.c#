#include "machine.h"
#include <stdio.h>

unsigned short check_instruction(Wrd instruction);

unsigned short print_instruction(Wrd instruction) {

  Wrd op, r1, r2, r3, memi, ext;
  op = (((1 << 5) - 1) & (instruction >> (27)));
  ext = (((1 << 3) - 1) & (instruction >> (24)));
  r1 = (((1 << 3) - 1) & (instruction >> (21)));
  r2 = (((1 << 3) - 1) & (instruction >> (18)));
  r3 = (((1 << 3) - 1) & (instruction >> (15)));
  memi = (((1 << 15) - 1) & (instruction >> (0)));
  Op_code ocode = op;
  if (op >= 0 || op < 27) {
    switch (ocode) {
    case PLUS:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "plus");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }

      break;
    case MINUS:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "minus");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case TIMES:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "times");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case DIV:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "div");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case MOD:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "mod");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case NEG:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6) {
        printf("%-5s", "neg");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
      }
      break;
    case ABS:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6) {
        printf("%-5s", "abs");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
      }
      break;
    case SHL:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "shl");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case SHR:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "shr");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case BAND:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "band");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case BOR:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "bor");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case BXOR:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "bxor");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case BNEG:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6) {
        printf("%-5s", "bneg");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
      }
      break;
    case AND:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "and");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case OR:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
        printf("%-5s", "or");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%s%d", "R", r3);
      }
      break;
    case NOT:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6) {
        printf("%-5s", "not");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
      }
      break;
    case EQ:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
        printf("%-5s", "eq");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%05d", memi);
      }
      break;
    case NEQ:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
        printf("%-5s", "neq");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%05d", memi);
      }
      break;
    case LE:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
        printf("%-5s", "le");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%05d", memi);
      }
      break;
    case LT:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
        printf("%-5s", "lt");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%05d", memi);
      }
      break;
    case GE:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
        printf("%-5s", "ge");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%05d", memi);
      }
      break;
    case GT:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
        printf("%-5s", "gt");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
        printf("%2c", ' ');
        printf("%05d", memi);
      }
      break;
    case MOVE:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6) {
        printf("%-5s", "move");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%s%d", "R", r2);
      }
      break;
    case LW:
      if (r1 >= 0 && r1 <= 5 && (memi % 4) == 0) {
        printf("%-5s", "lw");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%05d", memi);
      }
      break;
    case SW:
      if (r1 >= 0 && r1 <= 6 && (memi % 4) == 0) {
        printf("%-5s", "sw");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%05d", memi);
      }
      break;
    case LI:
      if (r1 >= 0 && r1 <= 5 && (memi % 4) == 0) {
        printf("%-5s", "li");
        printf("%2c", ' ');
        printf("%s%d", "R", r1);
        printf("%2c", ' ');
        printf("%5d", memi);
      }
      break;
    case SYS:
      if (r1 >= 0 && r1 <= 5 && ext >= 0 && ext <= 4) {
        printf("%-5s", "sys");
        printf("%2c", ' ');
        printf("%2d", ext);
        printf("%s%d", "R", r1);
      }
      break;

    default:
      break;
    }

    return 1;

  }

  else
    return 0;
}

unsigned short disassemble(const Wrd program[], unsigned short num_instrs,
                           unsigned short *const bad_instr) {
  int i, bdins;

  if (program != NULL && bad_instr != NULL && (num_instrs <= NUM_WORDS)) {

    int mem = 0;
    for (i = 0; i < num_instrs; i++) {

      bdins = check_instruction(program[i]);
      if (bdins != 0) {
        printf("%04x", mem);
        printf(": ");
        print_instruction(program[i]);
        mem += 4;
      } else
        *bad_instr = bdins;
    }
  }
}
short where_set(const Wrd program[], unsigned short num_words,
                unsigned short reg_nbr) {
  int i;
  unsigned short tmp_reg_nbr;

  if (program != NULL && (num_words <= NUM_WORDS) && reg_nbr >= 0 &&
      reg_nbr <= 5) {

    for (i = 0; i < num_words; i++) {
      if (check_instruction(program[i]) == 1) {

        int opc = (((1 << 5) - 1) & (program[i] >> (27)));
        int r1 = (((1 << 3) - 1) & (program[i] >> (21)));

        if (opc != 16 && opc != 17 && opc != 18 && opc != 19 && opc != 20 &&
            opc != 21 && opc != 24 && opc != 26 && reg_nbr == r1) {

          return i;

        } else if (opc == 26) {

          int ex = (((1 << 3) - 1) & (program[i] >> (24)));

          if ((ex == 0 || ex == 2) && reg_nbr == r1) {

            return i;
          }
        }
      }
    }

  }

  else
    return -1;
}

unsigned short is_safe(const Wrd program[], unsigned short pgm_size,
                       unsigned short *const bad_instr) {

  int i, r;

  if (program != NULL && (pgm_size <= NUM_WORDS) && bad_instr != NULL) {

    for (i = 0; i < pgm_size; i++) {
      if (check_instruction(program[i]) == 1) {

        Wrd op, r1, r2, r3, ext;
        op = (((1 << 5) - 1) & (program[i] >> (27)));
        ext = (((1 << 3) - 1) & (program[i] >> (24)));
        r1 = (((1 << 3) - 1) & (program[i] >> (21)));
        r2 = (((1 << 3) - 1) & (program[i] >> (18)));
        r3 = (((1 << 3) - 1) & (program[i] >> (15)));

        if (i == 0 && (op != 23 || op != 25 || op != 26)) {
          *bad_instr = i;
          return -1;
        } else if (i = 0 && op == 26) {
          if (ext != 0 || ext != 2) {
            *bad_instr = i;
            return -1;
          }

        }

        else if (i != 0 && (op == 0 || op == 1 || op == 2 || op == 3 ||
                            op == 4 || op == 7 || op == 8 || op == 9 ||
                            op == 10 || op == 11 || op == 13 || op == 14)) {
          /* reg 1-3 */
          if (where_set(program, i, r1) == -1 ||
              where_set(program, i, r2) == -1 ||
              where_set(program, i, r3) == -1) {
            *bad_instr = i;
            return -1;
          }

        } else if (i != 0 &&
                   (op == 5 || op == 6 || op == 12 || op == 15 || op == 22)) {
          /*  reg 1-2  */
          if (where_set(program, i, r1) == -1 ||
              where_set(program, i, r2) == -1) {
            *bad_instr = i;

            return -1;
          }

        } else if (op == 26) {
          if (i == 0 && (ext != 0 || ext != 2)) {
            *bad_instr = i;
            return -1;
          } else if (i != 0 && (ext != 0 || ext != 2) &&
                     where_set(program, i, r1) == -1) {
            *bad_instr = i;
            return -1;
          }
        }
      }
    }
  }

  return 1;
}

unsigned short check_instruction(Wrd instruction) {

  Wrd op, r1, r2, r3, memi, ext;
  op = (((1 << 5) - 1) & (instruction >> (27)));
  ext = (((1 << 3) - 1) & (instruction >> (24)));
  r1 = (((1 << 3) - 1) & (instruction >> (21)));
  r2 = (((1 << 3) - 1) & (instruction >> (18)));
  r3 = (((1 << 3) - 1) & (instruction >> (15)));
  memi = (((1 << 15) - 1) & (instruction >> (0)));
  Op_code ocode = op;
  if (op >= 0 || op < 27) {
    switch (ocode) {
    case PLUS:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }

      break;
    case MINUS:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case TIMES:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case DIV:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case MOD:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case NEG:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6) {
      }
      break;
    case ABS:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6) {
      }
      break;
    case SHL:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case SHR:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case BAND:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case BOR:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case BXOR:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case BNEG:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6) {
      }
      break;
    case AND:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case OR:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6 && r3 >= 0 && r3 <= 6) {
      }
      break;
    case NOT:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6) {
      }
      break;
    case EQ:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
      }
      break;
    case NEQ:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
      }
      break;
    case LE:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
      }
      break;
    case LT:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
      }
      break;
    case GE:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
      }
      break;
    case GT:
      if (r1 >= 0 && r1 <= 6 && r2 >= 0 && r2 <= 6 && (memi % 4) == 0) {
      }
      break;
    case MOVE:
      if (r1 >= 0 && r1 <= 5 && r2 >= 0 && r2 <= 6) {
      }
      break;
    case LW:
      if (r1 >= 0 && r1 <= 5 && (memi % 4) == 0) {
      }
      break;
    case SW:
      if (r1 >= 0 && r1 <= 6 && (memi % 4) == 0) {
      }
      break;
    case LI:
      if (r1 >= 0 && r1 <= 5 && (memi % 4) == 0) {
      }
      break;
    case SYS:
      if (r1 >= 0 && r1 <= 5 && ext >= 0 && ext <= 4) {
      }
      break;

    default:
      break;
    }

    return 1;
  } else
    return 0;
}BB